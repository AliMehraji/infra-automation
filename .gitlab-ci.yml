stages:
  - build
  - test
  - deploy

default:
  image: docker:dind
  before_script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_ADDR

include:
  - template: Security/Container-Scanning.gitlab-ci.yml

variables:
  IMAGE_PATH: $DOCKER_REGISTRY_ADDR/monster
  DOCKER_REGISTRY_ADDR: reg.blackskull.ir
  DOCKER_REGISTRY_USER: admin
  DOCKER_REGISTRY_PASSWORD: repo.harimi.ir
  CS_REGISTRY_USER: $DOCKER_REGISTRY_USER
  CS_REGISTRY_PASSWORD: $DOCKER_REGISTRY_PASSWORD

job-vote:
  stage: build
  script:
    - cd voting-app/vote
    - docker build -t $IMAGE_PATH/vote:$CI_COMMIT_SHORT_SHA .
    - docker push $IMAGE_PATH/vote:$CI_COMMIT_SHORT_SHA
# only:
#   changes:
#     - "voting-app/vote/*"

job-worker:
  stage: build
  script:
    - cd voting-app/worker
    - docker build -t $IMAGE_PATH/worker:$CI_COMMIT_SHORT_SHA .
    - docker push $IMAGE_PATH/worker:$CI_COMMIT_SHORT_SHA
# only:
#   changes:
#     - "voting-app/worker/*"

job-result:
  stage: build
  script:
    - cd voting-app/result
    - docker build -t $IMAGE_PATH/result:$CI_COMMIT_SHORT_SHA .
    - docker push $IMAGE_PATH/result:$CI_COMMIT_SHORT_SHA
# only:
#   changes:
#     - "voting-app/result/*"

job-test:
  stage: test
  script:
    - docker pull $IMAGE_PATH/vote:$CI_COMMIT_SHORT_SHA
    - docker pull $IMAGE_PATH/worker:$CI_COMMIT_SHORT_SHA
    - docker pull $IMAGE_PATH/result:$CI_COMMIT_SHORT_SHA
    - docker compose -f voting-app/result/docker-compose.test.yml
    - docker tag $IMAGE_PATH/vote:$CI_COMMIT_SHORT_SHA $IMAGE_PATH/vote:latest
    - docker tag $IMAGE_PATH/worker:$CI_COMMIT_SHORT_SHA $IMAGE_PATH/worker:latest
    - docker tag $IMAGE_PATH/result:$CI_COMMIT_SHORT_SHA $IMAGE_PATH/result:latest
    - docker push $IMAGE_PATH/vote:latest
    - docker push $IMAGE_PATH/worker:latest
    - docker push $IMAGE_PATH/result:latest

container_scanning:
  before_script:
    - ''
  needs:
    - job-test
  variables:
    CS_IMAGE: $IMAGE_PATH/vote:latest
  rules:
    - when: never

container_scanning_worker:
  extends: container_scanning
  needs:
    - job-test
  variables:
    CS_IMAGE: $IMAGE_PATH/worker:latest

container_scanning_result:
  extends: container_scanning
  needs:
    - job-test
  variables:
    CS_IMAGE: $IMAGE_PATH/result:latest

deploy-to-preproduction:
  stage: deploy
  variables:
    DOMAIN: pre.arman.fun
    SERVER_NAME: pre.arman.fun
    HOSTNAME: preProduction
    SSH_USER: user
    SSH_PORT: 22
    SERVICE_PATH: monster
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - echo "Host monster" > ~/.ssh/config
    - echo "  HostName $SERVER_NAME" >> ~/.ssh/config
    - echo "  User $SSH_USER" >> ~/.ssh/config
    - echo "  Port $SSH_PORT" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - |
      ssh monster "
      [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH} "
      scp -r backup-server \
            minio \
            monlog \
            traefik \
            voting-app/postgres \
            voting-app/redis \
            voting-app/.env \
            voting-app/docker-compose.yml \
            deploy-single-node.sh \
          monster:~/${SERVICE_PATH}
      ssh monster "
      [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH}
      cd ${SERVICE_PATH}/monlog/grafana
      tar czf provisioning.tar.gz ./dashboards ./datasources
      cd ~/${SERVICE_PATH}
      export DOMAIN=${DOMAIN}
      bash -c ./deploy-single-node.sh
      "
  environment:
    name: preProduction
    url: https://vote.$DOMAIN https://result.$DOMAIN
  when: always

deploy-to-production:
  stage: deploy
  variables:
    DOMAIN: repo.harimi.ir
    SERVER_NAME: production.harimi.ir
    HOSTNAME: production
    SSH_USER: user
    SSH_PORT: 22
    SERVICE_PATH: monster
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - echo "Host monster" > ~/.ssh/config
    - echo "  HostName $SERVER_NAME" >> ~/.ssh/config
    - echo "  User $SSH_USER" >> ~/.ssh/config
    - echo "  Port $SSH_PORT" >> ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - |
      ssh monster "
      [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH} "
      scp -r backup-server \
            minio \
            monlog \
            traefik \
            voting-app/postgres \
            voting-app/redis \
            voting-app/.env \
            voting-app/docker-compose.yml \
            deploy.sh \
          monster:~/${SERVICE_PATH}
      ssh monster "
      [ -d ${SERVICE_PATH} ] || mkdir -p ${SERVICE_PATH}
      cd ${SERVICE_PATH}/monlog/grafana
      tar czf provisioning.tar.gz ./dashboards ./datasources
      cd ~/${SERVICE_PATH}
      bash -c ./deploy.sh
      "
  environment:
    name: production
    url: https://vote.$DOMAIN https://result.$DOMAIN
  when: manual